{"version":3,"sources":["serviceWorker.js","components/AmazonProductCard.js","components/CheckerServiceLink.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AmazonProductCard","queryParams","Card","className","Body","Title","desc","CheckerServiceLink","checkerService","Button","variant","href","getUrl","asin","target","name","CheckerServiceList","id","reduce","r","index","App","useEffect","Table","responsive","map","key","err","matchUrl","search","split","param","m","exec","splice","value","decodeURI","unescape","replace","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dded0147.chunk.js","sourcesContent":["\"use struct\";\n\n// このオプションのコードは、Service Workerを登録するために使用されます。\n// register() はデフォルトでは呼び出されません。\n\n// これにより、その後の実稼働時のアクセスでアプリの読み込みが速くなり、\n// オフライン機能が提供されます。 ただし、開発者（およびユーザー）は、\n// 以前にキャッシュされたリソースがバックグラウンドで更新されるため、\n// ページで開いている既存のタブがすべて閉じられた後、ページへの以降の\n// アクセスでのみ展開された更新が表示されます。\n\n// このモデルの利点とオプトイン方法の詳細については、\n// https://bit.ly/CRA-PWA をご覧ください。\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] は IPv6 localhost アドレスです。\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 は IPv4 のローカルホストと見なされます。\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // URLコンストラクターは、SWをサポートするすべてのブラウザーで使用できます。\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // PUBLIC_URL がページの配信元と異なる発信元にある場合サービスワーカーは機能しません。\n      // これは、アセットの提供にCDNが使用されている場合に発生する可能性があります。\n      // https://github.com/facebook/create-react-app/issues/2374 を参照してください\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // これはローカルホストで実行されています。 Service Workerがまだ存在するかどうかを確認しましょう。\n        checkValidServiceWorker(swUrl, config);\n\n        // いくつかの追加のログを localhost に追加し、開発者に\n        // service worker/PWA ドキュメントを参照させます。\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // ローカルホストではありません。サービスワーカーを登録するだけです。\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // この時点で更新された事前キャッシュされたコンテンツが取得されましたが、\n              // 以前のサービスワーカーは、すべてのクライアントタブが閉じられるまで\n              // 古いコンテンツを引き続き提供します。\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // コールバックを実行\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // この時点ですべてが事前にキャッシュされています。\n              // \"コンテンツはオフラインで使用するためにキャッシュされます。\"\n              // メッセージを表示するのに最適なタイミングです。\n              console.log('Content is cached for offline use.');\n\n              // コールバックを実行\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // ページをリロードできない場合、サービスワーカーが見つかるかどうかを確認します。\n  fetch(swUrl)\n    .then(response => {\n      // Service Worker が存在し、JSファイルを実際に取得していることを確認してください。\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // サービスワーカーが見つかりません。おそらく別のアプリ。ページをリロード。\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // サービスワーカーが見つかりました。通常どおり続行。\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { useEffect } from'react';\nimport './AmazonProductCard.css';\n\nimport { Form } from 'react-bootstrap';\nimport { ListGroup } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap';\n\n//import MainView from './main/mainView';\n\nfunction AmazonProductCard({ queryParams }) {\n  \n  return (\n    <Card className=\"amazon-product-card\">\n      <Card.Body>\n        <Card.Title>{queryParams.desc}</Card.Title>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default AmazonProductCard;\n","import React from 'react';\nimport { useEffect } from'react';\nimport './CheckerServiceLink.css';\n\nimport { Form } from 'react-bootstrap';\nimport { ListGroup } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap';\n\n//import MainView from './main/mainView';\n\nfunction CheckerServiceLink({ checkerService, queryParams }) {\n  \n  return (\n    <Button\n      variant=\"link\"\n      className=\"checker-link\"\n      href={checkerService.getUrl(queryParams.asin)}\n      target=\"_blank\"\n    >\n      {checkerService.name}\n    </Button>\n  );\n}\n\nexport default CheckerServiceLink;\n","import React from 'react';\nimport { useEffect } from'react';\nimport './App.css';\n\nimport { Form } from 'react-bootstrap';\nimport { ListGroup } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap';\nimport { Table } from 'react-bootstrap';\n\n//import MainView from './main/mainView';\nimport AmazonProductCard from './components/AmazonProductCard';\nimport CheckerServiceLink from './components/CheckerServiceLink';\n\n\nconst CheckerServiceList = [\n  {id: 'mnrate',         name: 'モノレート', getUrl: (asin) => `https://mnrate.com/item/aid/${asin}` },\n  {id: 'sakura-checker', name: 'サクラチェッカー', getUrl: (asin) => `https://sakura-checker.jp/search/${asin}` },\n];\nconst CheckerServiceListLookup = CheckerServiceList.reduce((r, checkerService, index) => (r[checkerService.id] = index, r), {});\n\n\nfunction App({ queryParams }) {\n\n  console.log('queryParams',queryParams);\n  useEffect(() => {\n    console.log('queryParams.',queryParams);\n    if (queryParams.asin) {\n      const ASIN = queryParams.asin;\n      //window.location.href = `https://mnrate.com/item/aid/${ASIN}`;\n      //window.open(`https://mnrate.com/item/aid/${ASIN}`, '_blank');\n    }\n  }, [queryParams]);\n  \n  return (\n    <div className=\"App\">\n      <AmazonProductCard queryParams={queryParams} />\n\n      <div className=\"check-service-list\">\n        <Table responsive>\n          <tbody>\n            {CheckerServiceList.map((checkerService) => (\n                <tr key={checkerService.id}>\n                  <td></td>\n                  <td>\n                    <CheckerServiceLink\n                      checkerService={checkerService}\n                      queryParams={queryParams}\n                    />\n                    </td>\n                </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n\n{/*<TransitionProgress />*/}\n{/*\n<Form>\n  <div className=\"mb-3\">\n    <Form.Check\n            type=\"checkbox\"\n            label=\"first radio\"\n            name=\"formHorizontalRadios\"\n            id=\"formHorizontalRadios1\"\n          />\n  </div>\n</Form>\n\n<pre>{ Object.keys(window.location).map((k) => {\n        return `${JSON.stringify(k)}: ${JSON.stringify(window.location[k])}\\n`;\n      }) }</pre>\n      <pre>{ Object.keys(queryParams).map((k) => {\n        return `${JSON.stringify(k)}: ${JSON.stringify(queryParams[k])}\\n`;\n      }) }</pre>\n      */}\n      \n    </div>\n  );\n}\n\nexport default App;\n","\"use struct\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import '@forevolve/bootstrap-dark/dist/css/bootstrap-dark.min.css';\n//import './dark-theme.css';\nimport './index.css';\n\nimport App from './App';\n\nimport('./dark-theme.css')\n  .then(() => { })\n  .catch(err => { });\n\nconst matchUrl = /https[a-zA-Z0-9%_.-]+/;\n\nconst queryParams = window.location.search.split(/[?&]/).reduce((r, param) => {\n  const [ key, value ] = (/^([^=]+)=(.*)/.exec(param)||[]).splice(1);\n  param && (r[key] = decodeURI(value));\n  if ('text' == key) {\n    r['url']  = unescape(matchUrl.exec(r[key]));\n    r['desc'] = unescape(r[key].replace(matchUrl, '').replace(/\\+/g, ' '));\n    let m;\n    if (m = /https:\\/\\/www\\.amazon\\.co\\.jp\\/dp\\/([A-Za-z0-9]+)/.exec(r['url'])) {\n      r['asin'] = m[1];\n    }\n  }\n  return r;\n}, {});\n\nconst models = {\n};\n\nReactDOM.render(<App queryParams={queryParams} />, document.getElementById('root'));\n\n// アプリをオフラインで動作させてより速くロードしたい場合は、以下で unregister() を\n// register() に変更できます。これにはいくつかの落とし穴があります。\n// サービスワーカーの詳細: https://bit.ly/CRA-PWA\n\nserviceWorker.register();\n\n// 要求スペック\n//   config#onUpdate(registration);\n//   config#onSuccess(registration);\n// serviceWorker.register(config);\n"],"sourceRoot":""}